I"ØN<p>So the first thing we‚Äôll do, quite counterintuitively, is to deploy our application. Well, ‚ÄúWhy deploy an empty application which doesn‚Äôt exist yet?‚Äú you might ask. Why the heck not?</p>
<!--more-->
<ul>
    <li>It allows us to setup our continuous integration pipeline from the start.</li>
    <li>Also makes our application accessible to others for early feedback.</li>
</ul>

<p>We will need three things to get started.</p>
<p>A source code repository hosting service. ‚Üí Bitbucket
<br />A URL endpoint from any CDN provider. ‚Üí AWS S3
<br />And the CI/CD solution of your choosing. ‚Üí CircleCI
<br />
<br /></p>

<p><u class="faded-highlight">Repo setup</u><br /><br />
Let‚Äôs create a repository, my glorious project shall be called ‚Äúmonorepo-client‚Äù. Boring and nerdy, yet hits the spot. We can spice it up later when the project becomes a hit. Renaming repos is always fun.</p>

<p>Now that we have our remote repo setup, let‚Äôs clone it to our local, we will later connect this repo to CircleCI for CI/CD.</p>

<figure class="highlight"><pre><code class="language-console" data-lang="console"><span class="gp">$</span><span class="w"> </span>git clone git@bitbucket.org:monorepo-template/monorepo-client-root.git</code></pre></figure>

<figure class="highlight"><pre><code class="language-console" data-lang="console"><span class="gp">$</span><span class="w"> </span><span class="nb">cd </span>monorepo-client-root</code></pre></figure>

<figure class="highlight"><pre><code class="language-console" data-lang="console"><span class="gp">$</span><span class="w"> </span>npm init</code></pre></figure>

<p>After we navigate to our cloned folder and run ‚Äúnpm init‚Äù we will be guided in creating a minimal package.json file that will look like this.</p>
<p><u class="faded-highlight no-underline">&lt;root&gt;/package.json</u></p>

<figure class="highlight"><pre><code class="language-json" data-lang="json"><span class="w">    </span><span class="p">{</span><span class="w">
        </span><span class="nl">"name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"monorepo-client-root"</span><span class="p">,</span><span class="w">
        </span><span class="nl">"version"</span><span class="p">:</span><span class="w"> </span><span class="s2">"1.0.0"</span><span class="p">,</span><span class="w">
        </span><span class="nl">"description"</span><span class="p">:</span><span class="w"> </span><span class="s2">""</span><span class="p">,</span><span class="w">
        </span><span class="nl">"main"</span><span class="p">:</span><span class="w"> </span><span class="s2">"index.js"</span><span class="p">,</span><span class="w">
        </span><span class="nl">"scripts"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
        </span><span class="nl">"test"</span><span class="p">:</span><span class="w"> </span><span class="s2">"echo </span><span class="se">\"</span><span class="s2">Error: no test specified</span><span class="se">\"</span><span class="s2"> &amp;&amp; exit 1"</span><span class="w">
        </span><span class="p">},</span><span class="w">
        </span><span class="nl">"repository"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
        </span><span class="nl">"type"</span><span class="p">:</span><span class="w"> </span><span class="s2">"git"</span><span class="p">,</span><span class="w">
        </span><span class="nl">"url"</span><span class="p">:</span><span class="w"> </span><span class="s2">"git+ssh://git@bitbucket.org/monorepo-template/monorepo-client-root.git"</span><span class="w">
        </span><span class="p">},</span><span class="w">
        </span><span class="nl">"author"</span><span class="p">:</span><span class="w"> </span><span class="s2">""</span><span class="p">,</span><span class="w">
        </span><span class="nl">"license"</span><span class="p">:</span><span class="w"> </span><span class="s2">"ISC"</span><span class="p">,</span><span class="w">
        </span><span class="nl">"homepage"</span><span class="p">:</span><span class="w"> </span><span class="s2">"https://bitbucket.org/monorepo-template/monorepo-client-root#readme"</span><span class="w">
    </span><span class="p">}</span></code></pre></figure>

<p><br />
<u class="faded-highlight">React app setup with Typescript Babel and Eslint</u><br /></p>
<p>We also create a directory for our React application, we will call this folder ‚Äúweb-client‚Äù. After you navigate to this folder, once again run ‚Äúnpm init‚Äù, this one we will configure with the scripts and dependencies for our web application.</p>

<figure class="highlight"><pre><code class="language-console" data-lang="console"><span class="gp">$</span><span class="w"> </span><span class="nb">mkdir </span>web-client <span class="o">&amp;&amp;</span> <span class="nb">cd </span>web-client <span class="o">&amp;&amp;</span> npm init</code></pre></figure>

<p>The next steps will be following the amazing tutorial by Carl Rippon, <a href="https://www.carlrippon.com/creating-react-app-with-typescript-eslint-with-webpack5/" target="_blank">‚ÄúCreating a React app with TypeScript and ESLint with Webpack 5‚Äù</a>. The explanations he provides are so educational, I suggest you take the time to read it in full. If you are already comfortable with these concepts, the rest of our configuration till the deployment section are the steps highlighted in his post.</p>

<p>Install react, react-dom and typescript for our project.</p>

<figure class="highlight"><pre><code class="language-console" data-lang="console"><span class="gp">$</span><span class="w"> </span>npm i react react-dom</code></pre></figure>

<figure class="highlight"><pre><code class="language-console" data-lang="console"><span class="gp">$</span><span class="w"> </span>npm i <span class="nt">--save-dev</span> typescript</code></pre></figure>

<figure class="highlight"><pre><code class="language-console" data-lang="console"><span class="gp">$</span><span class="w"> </span>npm i <span class="nt">--save-dev</span> @types/react @types/react-dom</code></pre></figure>

<p>Init the tsconfig.json file using the following command</p>

<figure class="highlight"><pre><code class="language-console" data-lang="console"><span class="gp">$</span><span class="w"> </span>npx tsc <span class="nt">--init</span></code></pre></figure>

<p>Edit the tsconfig.json to include the following.</p>

<p><u class="faded-highlight no-underline">&lt;root&gt;/web-client/tsconfig.json</u></p>

<figure class="highlight"><pre><code class="language-json" data-lang="json"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
</pre></td><td class="code"><pre><span class="w">   </span><span class="nl">"compilerOptions"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
   </span><span class="nl">"target"</span><span class="p">:</span><span class="w"> </span><span class="s2">"es5"</span><span class="p">,</span><span class="w">
   </span><span class="nl">"module"</span><span class="p">:</span><span class="w"> </span><span class="s2">"commonjs"</span><span class="p">,</span><span class="w">                
   </span><span class="nl">"lib"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="s2">"DOM"</span><span class="p">,</span><span class="s2">"DOM.Iterable"</span><span class="p">,</span><span class="s2">"ESNext"</span><span class="p">],</span><span class="w">
   </span><span class="nl">"allowJs"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">          
   </span><span class="nl">"jsx"</span><span class="p">:</span><span class="w"> </span><span class="s2">"react"</span><span class="p">,</span><span class="w">
   </span><span class="nl">"isolatedModules"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">
   </span><span class="nl">"resolveJsonModule"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">
   </span><span class="nl">"strict"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">
   </span><span class="nl">"moduleResolution"</span><span class="p">:</span><span class="w"> </span><span class="s2">"node"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"allowSyntheticDefaultImports"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">    
   </span><span class="nl">"esModuleInterop"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">
    </span><span class="nl">"skipLibCheck"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">                          
   </span><span class="nl">"forceConsistentCasingInFileNames"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span><span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></figure>

<p>Create a src folder within ‚Äúweb-client‚Äù and add our entry point there with index.html.</p>

<p><u class="faded-highlight no-underline">&lt;root&gt;/web-client/src/index.html</u></p>

<figure class="highlight"><pre><code class="language-html" data-lang="html"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
</pre></td><td class="code"><pre><span class="cp">&lt;!DOCTYPE html&gt;</span>
<span class="nt">&lt;html&gt;</span>
    <span class="nt">&lt;head&gt;</span>
    <span class="nt">&lt;meta</span> <span class="na">charset=</span><span class="s">"utf-8"</span> <span class="nt">/&gt;</span>
    <span class="nt">&lt;title&gt;</span>Template React App<span class="nt">&lt;/title&gt;</span>
    <span class="nt">&lt;/head&gt;</span>
<span class="nt">&lt;body&gt;</span>
    <span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">"root"</span><span class="nt">&gt;&lt;/div&gt;</span>
<span class="nt">&lt;/body&gt;</span>
<span class="nt">&lt;/html&gt;</span>
</pre></td></tr></tbody></table></code></pre></figure>

<p>Create index.tsx in the same folder with the following content.</p>

<p><u class="faded-highlight no-underline">&lt;root&gt;/web-client/src/index.tsx</u></p>

<figure class="highlight"><pre><code class="language-react" data-lang="react"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
</pre></td><td class="code"><pre><span class="k">import</span> <span class="nx">React</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">ReactDOM</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react-dom</span><span class="dl">"</span><span class="p">;</span>
<span class="err">‚Äç</span>
<span class="kd">const</span> <span class="nx">App</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">(</span>
 <span class="p">&lt;</span><span class="nt">h1</span><span class="p">&gt;</span>Testing out automated deployments.<span class="p">&lt;/</span><span class="nt">h1</span><span class="p">&gt;</span>
<span class="p">);</span>
<span class="err">‚Äç</span>
<span class="nx">ReactDOM</span><span class="p">.</span><span class="nx">render</span><span class="p">(</span>
 <span class="p">&lt;</span><span class="nc">React</span><span class="p">.</span><span class="nc">StrictMode</span><span class="p">&gt;</span>
   <span class="p">&lt;</span><span class="nc">App</span> <span class="p">/&gt;</span>
 <span class="p">&lt;/</span><span class="nc">React</span><span class="p">.</span><span class="nc">StrictMode</span><span class="p">&gt;,</span>
 <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="dl">"</span><span class="s2">root</span><span class="dl">"</span><span class="p">)</span>
<span class="p">);</span>
</pre></td></tr></tbody></table></code></pre></figure>

<p>We need Babel to turn our Typescript code to Javascript so we can deploy our React application. Let‚Äôs install it.</p>

<figure class="highlight"><pre><code class="language-console" data-lang="console"><span class="gp">$</span><span class="w"> </span>npm i <span class="nt">--save-dev</span> @babel/core @babel/preset-env @babel/preset-react @babel/preset-typescript @babel/plugin-transform-runtime @babel/runtime</code></pre></figure>

<p>Create .babelrc to configure Babel.</p>

<p><u class="faded-highlight no-underline">&lt;root&gt;/web-client/.babelrc</u></p>

<figure class="highlight"><pre><code class="language-json" data-lang="json"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
</pre></td><td class="code"><pre><span class="p">{</span><span class="w">
   </span><span class="nl">"presets"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
     </span><span class="s2">"@babel/preset-env"</span><span class="p">,</span><span class="w">
     </span><span class="s2">"@babel/preset-react"</span><span class="p">,</span><span class="w">
     </span><span class="s2">"@babel/preset-typescript"</span><span class="w">
   </span><span class="p">],</span><span class="w">
   </span><span class="nl">"plugins"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
     </span><span class="p">[</span><span class="w">
       </span><span class="s2">"@babel/plugin-transform-runtime"</span><span class="p">,</span><span class="w">
       </span><span class="p">{</span><span class="w">
         </span><span class="nl">"regenerator"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
       </span><span class="p">}</span><span class="w">
     </span><span class="p">]</span><span class="w">
   </span><span class="p">]</span><span class="w">
 </span><span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></figure>

<p>Now that we configured Babel and Typescript, we might just as well add linting to our project. Let‚Äôs install and configure ESLint.</p>

<figure class="highlight"><pre><code class="language-console" data-lang="console"><span class="gp">$</span><span class="w"> </span>npm i <span class="nt">--save-dev</span> eslint eslint-plugin-react eslint-plugin-react-hooks @typescript-eslint/parser @typescript-eslint/eslint-plugin</code></pre></figure>

<p>Create .eslintrc.json in the web-client directory.</p>

<p><u class="faded-highlight no-underline">&lt;root&gt;/web-client/.eslintrc.json</u></p>

<figure class="highlight"><pre><code class="language-json" data-lang="json"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
</pre></td><td class="code"><pre><span class="p">{</span><span class="w">
   </span><span class="nl">"parser"</span><span class="p">:</span><span class="w"> </span><span class="s2">"@typescript-eslint/parser"</span><span class="p">,</span><span class="w">
   </span><span class="nl">"parserOptions"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
     </span><span class="nl">"ecmaVersion"</span><span class="p">:</span><span class="w"> </span><span class="mi">2018</span><span class="p">,</span><span class="w">
     </span><span class="nl">"sourceType"</span><span class="p">:</span><span class="w"> </span><span class="s2">"module"</span><span class="w">
   </span><span class="p">},</span><span class="w">
   </span><span class="nl">"plugins"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
     </span><span class="s2">"@typescript-eslint"</span><span class="p">,</span><span class="w">
     </span><span class="s2">"react-hooks"</span><span class="w">
   </span><span class="p">],</span><span class="w">
   </span><span class="nl">"extends"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
     </span><span class="s2">"plugin:react/recommended"</span><span class="p">,</span><span class="w">
     </span><span class="s2">"plugin:@typescript-eslint/recommended"</span><span class="w">
   </span><span class="p">],</span><span class="w">
   </span><span class="nl">"rules"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
     </span><span class="nl">"react-hooks/rules-of-hooks"</span><span class="p">:</span><span class="w"> </span><span class="s2">"error"</span><span class="p">,</span><span class="w">
     </span><span class="nl">"react-hooks/exhaustive-deps"</span><span class="p">:</span><span class="w"> </span><span class="s2">"warn"</span><span class="p">,</span><span class="w">
     </span><span class="nl">"react/prop-types"</span><span class="p">:</span><span class="w"> </span><span class="s2">"off"</span><span class="w">
   </span><span class="p">},</span><span class="w">
   </span><span class="nl">"settings"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
     </span><span class="nl">"react"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
       </span><span class="nl">"pragma"</span><span class="p">:</span><span class="w"> </span><span class="s2">"React"</span><span class="p">,</span><span class="w">
       </span><span class="nl">"version"</span><span class="p">:</span><span class="w"> </span><span class="s2">"detect"</span><span class="w">
     </span><span class="p">}</span><span class="w">
   </span><span class="p">}</span><span class="w">
 </span><span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></figure>

<p><br />
<u class="faded-highlight">Webpack setup</u><br /></p>
<p>Adding Webpack</p>

<figure class="highlight"><pre><code class="language-console" data-lang="console"><span class="go">    npm i --save-dev webpack webpack-cli @types/webpack</span></code></pre></figure>

<figure class="highlight"><pre><code class="language-console" data-lang="console"><span class="go">    npm install --save-dev webpack-dev-server @types/webpack-dev-server</span></code></pre></figure>

<figure class="highlight"><pre><code class="language-console" data-lang="console"><span class="go">    npm install --save-dev babel-loader</span></code></pre></figure>

<figure class="highlight"><pre><code class="language-console" data-lang="console"><span class="go">    npm install --save-dev html-webpack-plugin</span></code></pre></figure>

<figure class="highlight"><pre><code class="language-console" data-lang="console"><span class="gp">$</span><span class="w"> </span>npm i <span class="nt">--save-dev</span> webpack webpack-cli @</code></pre></figure>

<p>To be able to use .ts extension with webpack configuration files, install ts-node</p>

<figure class="highlight"><pre><code class="language-console" data-lang="console"><span class="go">    npm install --save-dev ts-node</span></code></pre></figure>

<p>Let‚Äôs also add typechecking and linting capabilities to webpack.</p>

<figure class="highlight"><pre><code class="language-console" data-lang="console"><span class="go">    npm install --save-dev fork-ts-checker-webpack-plugin @types/fork-ts-checker-webpack-plugin</span></code></pre></figure>

<figure class="highlight"><pre><code class="language-console" data-lang="console"><span class="go">    npm install --save-dev eslint-webpack-plugin</span></code></pre></figure>

<p>Now configure webpack.dev.config.ts for development environment</p>
:ET